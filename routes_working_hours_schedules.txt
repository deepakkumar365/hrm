

# Working Hours Management Routes
@app.route('/masters/working-hours')
@require_role(['Super Admin', 'Admin'])
def working_hours_list():
    """List all working hours configurations"""
    page = request.args.get('page', 1, type=int)
    working_hours = WorkingHours.query.filter_by(is_active=True).order_by(WorkingHours.name).paginate(
        page=page, per_page=20, error_out=False)
    return render_template('masters/working_hours/list.html', working_hours=working_hours)


@app.route('/masters/working-hours/add', methods=['GET', 'POST'])
@require_role(['Super Admin', 'Admin'])
def working_hours_add():
    """Add new working hours configuration"""
    if request.method == 'POST':
        try:
            working_hours = WorkingHours(
                name=request.form.get('name'),
                hours_per_day=float(request.form.get('hours_per_day')),
                hours_per_week=float(request.form.get('hours_per_week')),
                description=request.form.get('description')
            )
            db.session.add(working_hours)
            db.session.commit()
            flash('Working hours configuration created successfully', 'success')
            return redirect(url_for('working_hours_list'))
        except Exception as e:
            db.session.rollback()
            flash(f'Error creating working hours configuration: {str(e)}', 'error')
    
    return render_template('masters/working_hours/form.html')


@app.route('/masters/working-hours/<int:working_hours_id>/edit', methods=['GET', 'POST'])
@require_role(['Super Admin', 'Admin'])
def working_hours_edit(working_hours_id):
    """Edit working hours configuration"""
    working_hours = WorkingHours.query.get_or_404(working_hours_id)
    
    if request.method == 'POST':
        try:
            working_hours.name = request.form.get('name')
            working_hours.hours_per_day = float(request.form.get('hours_per_day'))
            working_hours.hours_per_week = float(request.form.get('hours_per_week'))
            working_hours.description = request.form.get('description')
            db.session.commit()
            flash('Working hours configuration updated successfully', 'success')
            return redirect(url_for('working_hours_list'))
        except Exception as e:
            db.session.rollback()
            flash(f'Error updating working hours configuration: {str(e)}', 'error')
    
    return render_template('masters/working_hours/form.html', working_hours=working_hours)


@app.route('/masters/working-hours/<int:working_hours_id>/delete', methods=['POST'])
@require_role(['Super Admin', 'Admin'])
def working_hours_delete(working_hours_id):
    """Delete working hours configuration (soft delete)"""
    working_hours = WorkingHours.query.get_or_404(working_hours_id)
    try:
        working_hours.is_active = False
        db.session.commit()
        flash('Working hours configuration deleted successfully', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'Error deleting working hours configuration: {str(e)}', 'error')
    return redirect(url_for('working_hours_list'))


# Work Schedule Management Routes
@app.route('/masters/work-schedules')
@require_role(['Super Admin', 'Admin'])
def work_schedule_list():
    """List all work schedules"""
    page = request.args.get('page', 1, type=int)
    search = request.args.get('search', '')
    
    query = WorkSchedule.query.filter_by(is_active=True)
    if search:
        query = query.filter(WorkSchedule.name.ilike(f'%{search}%'))
    
    work_schedules = query.order_by(WorkSchedule.name).paginate(
        page=page, per_page=20, error_out=False)
    return render_template('masters/work_schedules/list.html', work_schedules=work_schedules, search=search)


@app.route('/masters/work-schedules/add', methods=['GET', 'POST'])
@require_role(['Super Admin', 'Admin'])
def work_schedule_add():
    """Add new work schedule"""
    if request.method == 'POST':
        try:
            from datetime import datetime
            start_time = datetime.strptime(request.form.get('start_time'), '%H:%M').time()
            end_time = datetime.strptime(request.form.get('end_time'), '%H:%M').time()
            
            work_schedule = WorkSchedule(
                name=request.form.get('name'),
                start_time=start_time,
                end_time=end_time,
                break_duration=int(request.form.get('break_duration', 60)),
                description=request.form.get('description')
            )
            db.session.add(work_schedule)
            db.session.commit()
            flash('Work schedule created successfully', 'success')
            return redirect(url_for('work_schedule_list'))
        except Exception as e:
            db.session.rollback()
            flash(f'Error creating work schedule: {str(e)}', 'error')
    
    return render_template('masters/work_schedules/form.html')


@app.route('/masters/work-schedules/<int:work_schedule_id>/edit', methods=['GET', 'POST'])
@require_role(['Super Admin', 'Admin'])
def work_schedule_edit(work_schedule_id):
    """Edit work schedule"""
    work_schedule = WorkSchedule.query.get_or_404(work_schedule_id)
    
    if request.method == 'POST':
        try:
            from datetime import datetime
            start_time = datetime.strptime(request.form.get('start_time'), '%H:%M').time()
            end_time = datetime.strptime(request.form.get('end_time'), '%H:%M').time()
            
            work_schedule.name = request.form.get('name')
            work_schedule.start_time = start_time
            work_schedule.end_time = end_time
            work_schedule.break_duration = int(request.form.get('break_duration', 60))
            work_schedule.description = request.form.get('description')
            db.session.commit()
            flash('Work schedule updated successfully', 'success')
            return redirect(url_for('work_schedule_list'))
        except Exception as e:
            db.session.rollback()
            flash(f'Error updating work schedule: {str(e)}', 'error')
    
    return render_template('masters/work_schedules/form.html', work_schedule=work_schedule)


@app.route('/masters/work-schedules/<int:work_schedule_id>/delete', methods=['POST'])
@require_role(['Super Admin', 'Admin'])
def work_schedule_delete(work_schedule_id):
    """Delete work schedule (soft delete)"""
    work_schedule = WorkSchedule.query.get_or_404(work_schedule_id)
    try:
        work_schedule.is_active = False
        db.session.commit()
        flash('Work schedule deleted successfully', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'Error deleting work schedule: {str(e)}', 'error')
    return redirect(url_for('work_schedule_list'))