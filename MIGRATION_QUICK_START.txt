================================================================================
                   🚀 MIGRATION QUICK START GUIDE
                      Development to Production DB
================================================================================

⏱️ TOTAL TIME: ~75 minutes (All steps included)

================================================================================
                         ⚠️  CRITICAL FIRST!
================================================================================

BACKUP FIRST (This cannot be overstated):
────────────────────────────────────────────────────────────────────────────────

1. BACKUP PRODUCTION DATABASE (if it exists and has data):
   
   On Windows (PowerShell):
   ───────────────────────
   $env:PGPASSWORD="your_password"; 
   pg_dump -h your_host -U your_user prod_db > "C:\backups\prod_backup_$(Get-Date -f 'yyyyMMdd_HHmmss').sql"
   
   On Linux/Mac:
   ──────────────
   pg_dump -h your_host -U your_user prod_db > ~/backups/prod_backup_$(date +%Y%m%d_%H%M%S).sql


2. BACKUP DEVELOPMENT DATABASE (to recover if needed):
   
   On Windows (PowerShell):
   ───────────────────────
   $env:PGPASSWORD="your_password"; 
   pg_dump -h your_host -U your_user dev_db > "C:\backups\dev_backup_$(Get-Date -f 'yyyyMMdd_HHmmss').sql"
   
   On Linux/Mac:
   ──────────────
   pg_dump -h your_host -U your_user dev_db > ~/backups/dev_backup_$(date +%Y%m%d_%H%M%S).sql

================================================================================
                           STEP 0: VERIFICATION
                              (5 minutes)
================================================================================

Run the PRE-MIGRATION checklist to verify everything is ready:

   Windows (PowerShell):
   ──────────────────────
   cd "E:\Gobi\Pro\HRMS\hrm"
   python pre_migration_checklist.py

   Linux/Mac:
   ──────────
   cd ~/path/to/hrm
   python pre_migration_checklist.py

Expected Output:
   ✅ All environment variables set
   ✅ Development database connected
   ✅ Production database connected
   ✅ Python 3.9+ installed
   ✅ All required packages present
   ✅ Migration files found
   ✅ Disk space available

If you see ❌ CRITICAL ISSUES:
   → Fix them before proceeding!
   → Most common: Missing DEV_DATABASE_URL or PROD_DATABASE_URL in .env

================================================================================
                           STEP 1: STOP APPLICATION
                              (2 minutes)
================================================================================

Stop all running instances:

   If running on local machine:
   ──────────────────────────────
   Press CTRL+C in the terminal running the app

   If running as a service on Render/Cloud:
   ───────────────────────────────────────
   Stop the service in your deployment dashboard
   OR: suspend the service for 30 minutes

Reason: Prevents users from making changes during migration

================================================================================
                      STEP 2: VERIFY CONNECTIVITY
                              (3 minutes)
================================================================================

Test that both databases are accessible:

   On Windows (PowerShell):
   ────────────────────────
   # Test Dev Database
   $env:PGPASSWORD="your_dev_password"; 
   psql -h your_dev_host -U your_dev_user -d dev_db -c "SELECT version();"
   
   # Test Prod Database
   $env:PGPASSWORD="your_prod_password"; 
   psql -h your_prod_host -U your_prod_user -d prod_db -c "SELECT version();"

Expected: Version information displays successfully

If connection fails:
   → Check database URL in .env
   → Verify database is running
   → Check firewall/network access
   → Contact database admin

================================================================================
                        STEP 3: RUN MIGRATION
                             (10 minutes)
================================================================================

Execute the migration script:

   Option A: FULL MIGRATION (Recommended for first time)
   ──────────────────────────────────────────────────────
   Windows (PowerShell):
   cd "E:\Gobi\Pro\HRMS\hrm"
   python db_migration_to_prod.py --mode full
   
   Linux/Mac:
   cd ~/path/to/hrm
   python db_migration_to_prod.py --mode full

   This does:
   ✓ Runs Alembic schema migrations
   ✓ Exports master data from development
   ✓ Imports master data to production
   ✓ Performs validation

   Expected Output:
   🔗 Connecting to development database...
   ✅ Development database connected
   🔗 Connecting to production database...
   ✅ Production database connected
   
   📋 Verifying database schemas...
   ... (more steps) ...
   
   ✅ MIGRATION COMPLETED SUCCESSFULLY


   Option B: SCHEMA ONLY (Testing/Safe)
   ───────────────────────────────────────
   python db_migration_to_prod.py --mode schema-only
   
   (Use this to test if schema migration works without moving data)


   Option C: DATA ONLY (If schema already exists)
   ───────────────────────────────────────────────
   python db_migration_to_prod.py --mode data-only


If migration fails:
   → Read error message carefully
   → Check connectivity again
   → See TROUBLESHOOTING section below
   → Restore from backup and try again

================================================================================
                        STEP 4: VERIFY MIGRATION
                              (5 minutes)
================================================================================

Run verification to confirm migration success:

   Windows (PowerShell):
   ──────────────────────
   cd "E:\Gobi\Pro\HRMS\hrm"
   python verify_prod_migration.py --quick

   Expected Output:
   ✅ Development database connected
   ✅ Production database connected
   ✅ All tables present in production
   ✅ Organizations: X records
   ✅ Roles: X records
   ✅ Designations: X records
   
   ✅ MIGRATION SUCCESSFUL

For detailed verification:
   python verify_prod_migration.py --detailed

If verification fails:
   → Check error messages
   → Restore backup: psql -h host -U user -d db < backup.sql
   → Contact support

================================================================================
                    STEP 5: SETUP USER PASSWORDS
                              (3 minutes)
================================================================================

After migration, reset all user passwords to a known value:

   Windows (PowerShell):
   ──────────────────────
   cd "E:\Gobi\Pro\HRMS\hrm"
   python prod_password_management.py

   Choose: Option 4 (Reset ALL users)
   Enter password: Noltrion@123
   Confirm: yes

   This makes all users have the same temporary password.
   They will be forced to change it on first login.

Expected Output:
   Menu Options:
   1. List all users
   2. Verify user password
   3. Reset specific user password
   4. Reset ALL user passwords    ← SELECT THIS
   5. Export credentials to JSON
   6. Debug password

   Option chosen: 4
   Enter new password: Noltrion@123
   Confirm password: Noltrion@123
   ✅ Password reset for 8 users

================================================================================
                    STEP 6: TEST LOGIN (OPTIONAL)
                              (3 minutes)
================================================================================

Verify users can login with the new password:

   Windows (PowerShell):
   ──────────────────────
   cd "E:\Gobi\Pro\HRMS\hrm"
   python test_login_credentials.py

   Expected Output:
   Testing login credentials...
   ✅ superadmin: CAN LOGIN with password
   ✅ manager: CAN LOGIN with password
   ✅ employee: CAN LOGIN with password
   ... (more users) ...
   
   ✅ All users tested successfully

================================================================================
                    STEP 7: START APPLICATION
                              (2 minutes)
================================================================================

Start the application in production mode:

   On Local Machine:
   ──────────────────
   Windows (PowerShell):
   $env:ENVIRONMENT="production"
   python main.py

   Linux/Mac:
   export ENVIRONMENT=production
   python main.py

   On Render/Cloud:
   ─────────────────
   Re-enable/restart the service in deployment dashboard

   Expected Output:
   [INFO] Running in PRODUCTION mode
   [INFO] Starting HRMS Application...
   [INFO] Connected to database...
   * Running on https://your-app.com

   Then test:
   → Go to https://your-app.com/login
   → Login with: superadmin / Noltrion@123
   → You should see the dashboard

================================================================================
                         ✅ SUCCESS INDICATORS
================================================================================

After migration, verify these work:

   ✅ Application starts without errors
   ✅ Can login with temporary password
   ✅ Dashboard loads and displays data
   ✅ Organizations visible in dropdown
   ✅ Designations available in forms
   ✅ Leave types configured
   ✅ Payroll module accessible
   ✅ Reports generate correctly
   ✅ All users can access their respective areas

If any of these don't work:
   → Check application logs
   → Verify database connectivity
   → Run verify_prod_migration.py --detailed

================================================================================
                         🚨 TROUBLESHOOTING
================================================================================

PROBLEM: "Connection refused" error
──────────────────────────────────────
Solution:
   1. Verify database is running: psql --version
   2. Check database URL in .env: PROD_DATABASE_URL
   3. Test connection: psql $PROD_DATABASE_URL -c "SELECT 1"
   4. Check firewall/VPN if remote database

PROBLEM: "Foreign key constraint failed"
──────────────────────────────────────────
Solution:
   1. Check data integrity: python verify_prod_migration.py --detailed
   2. May have inconsistent data in development
   3. Contact database admin if problem persists

PROBLEM: "Out of disk space" error
──────────────────────────────────────
Solution:
   1. Free up space on server
   2. Delete old backup files
   3. Run migration again

PROBLEM: Application won't start in production
────────────────────────────────────────────────
Solution:
   1. Check PROD_DATABASE_URL in .env
   2. Check PROD_SESSION_SECRET in .env
   3. Run: python main.py (with debug output)
   4. Check application.log file for errors

PROBLEM: Users can't login after migration
───────────────────────────────────────────
Solution:
   1. Reset all user passwords: python prod_password_management.py
   2. Choose option 4 to reset all users
   3. Set password to: Noltrion@123
   4. Test again: python test_login_credentials.py

PROBLEM: Some data missing after migration
──────────────────────────────────────────
Solution:
   1. Check which tables are empty: python verify_prod_migration.py --detailed
   2. Export missing data manually from dev
   3. Import into production
   4. Or restore backup and try again

================================================================================
                         📚 ADDITIONAL RESOURCES
================================================================================

Detailed Documentation:
   • MIGRATION_PREPARATION.md - Complete migration guide
   • Check logs: tail -f application.log
   • Database stats: python verify_prod_migration.py --stats

Scripts Available:
   • db_migration_to_prod.py - Main migration tool
   • verify_prod_migration.py - Verification tool
   • pre_migration_checklist.py - Pre-flight checks
   • prod_password_management.py - Password management
   • test_login_credentials.py - Test login

Support Commands:
   # Quick status
   python verify_prod_migration.py --quick
   
   # Detailed report
   python verify_prod_migration.py --detailed
   
   # Test connectivity
   python pre_migration_checklist.py

================================================================================
                              ⏱️ TIMELINE
================================================================================

Task                          Duration      Cumulative
────────────────────────────────────────────────────────
Backup databases              10 min        10 min
Pre-migration checks          5 min         15 min
Stop application              2 min         17 min
Verify connectivity           3 min         20 min
Run migration                 10 min        30 min
Verify results                5 min         35 min
Setup user passwords          3 min         38 min
Test login                    3 min         41 min
Start application             2 min         43 min
Final testing                 5 min         48 min
────────────────────────────────────────────────────────
TOTAL                                       48 min

Buffer for contingencies: +30 min
Expected total: ~75-90 minutes

================================================================================
                           ✨ YOU'RE READY!
================================================================================

Next Steps:
   1. Review this guide completely
   2. Run: python pre_migration_checklist.py
   3. Create backups (CRITICAL!)
   4. Execute migration
   5. Verify success
   6. Start application
   7. Test functionality

For questions or issues, refer to MIGRATION_PREPARATION.md or contact support.

Good luck! 🎉

================================================================================
Last Updated: 2024
Version: 1.0
Status: READY FOR PRODUCTION MIGRATION
================================================================================